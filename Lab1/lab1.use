model GestionConvoiCriterion

class Radio
end

class VehiculeController
end

class Radar
end

class Camera
end

class System
 operations
 
 --Operation #0 : Crée un peloton à partir d'un leader et des voitures qui vont le suivre. La voiture et le
 -- 			  le conducteur du leader doivent etre inscrits dans le systeme, mais pas necessaire pour les autres voitures.
  createPeloton(leader:PlatoonVehicule,voitures:Set(PlatoonVehicule)) : Platoon
	  pre leaderPasDansSuiveux: voitures->excludes(leader)
      pre leaderEnregistrees:self.enregistres.ID->includes(leader.ID)
      pre conducteurLeaderInscrit:self.inscrits.ID->includes(leader.conducteur.ID)
      post tousVoituresDansPeloton:result.voitures->includesAll(voitures->including(leader)) and result.voitures->size()=voitures->size()+1
      post positionValide: result.voitures->forAll(v|result.voitures->sortedBy(position)->at(v.position)=v) and result.voitures->any(position=1) = leader
      post traquageCamera:result.voitures->select(position>1)->forAll(v|v.vc.camera.cibleCamera = result.voitures->any(position=v.position-1))
      post traquageRadar:result.voitures->select(position>1)->forAll(v|v.vc.radar.cibleRadar = result.voitures->any(position=v.position-1))
      post radioMisAJour: result.voitures->forAll(v| v.vc.radio.receveurs = result.voitures->excluding(v))

-- Operation #1 ajoute un Peloton dans la liste des peloton actifs
  ajouterPeloton(p:Platoon)
      pre pelotonPasDejaDansSystem:self.pelotons->excludes(p)
      post pelotonAjoute:self.pelotons= self.pelotons@pre->including(p)

-- Operation #2 enleve le peloton du systeme et enleve les liens entre les voitures de ce dernier.
-- 				chaque voiture du peloton doivent avoir un conducteur pour eviter qu'une voiture sans conducteur
-- 				soit enlever de son peloton alors qu'ell est en mouvement.
  dissoudrePeloton(p:Platoon)
      pre vontuiresOntConducteur:p.voitures->forAll(conducteur->notEmpty())
      post positionMisAJour:p.voitures->forAll(position=0)
      post aucunTraquageCamera:p.voitures->forAll(vc.camera.cibleCamera->isEmpty())
      post aucunTraquageRadar:p.voitures->forAll(vc.radar.cibleRadar->isEmpty())
      post aucunRadio:p.voitures->forAll(vc.radio.receveurs->isEmpty())
      post pelotonPlusDansSysteme: self.pelotons = self.pelotons@pre->excluding(p)

--Operation #3 Enregistre une voiture dans le systeme 
  enregistrerVoiture(voiture:PlatoonVehicule)
      pre voiturePasDansSysteme:self.enregistres->excludes(voiture)
      pre pasDeConducteur: voiture.conducteur->isEmpty()
      post voitureDansSysteme: self.enregistres = self.enregistres@pre->including(voiture)
	  post voitureObtientId: voiture.ID.isDefined()
	  post IdUnique: self.enregistres->one(ID = voiture.ID)

--Operation #4 Inscrit un conducteur dans le systeme  
  inscrireConducteur(conducteur:Conducteur)
      pre conducteurPasDansSysteme:self.inscrits->excludes(conducteur)
      pre conducteurNom: conducteur.name.isDefined() and conducteur.name.size()>0
      post conducteurDansSystem: self.inscrits = self.inscrits@pre->including(conducteur)
	  post conducteurObtientId: conducteur.ID.isDefined()
	  post IdUnique: self.inscrits->one(ID = conducteur.ID)
	  
--Requete #1 Un peloton est considéré comme actif s'il comporte plus qu'une voiture. 
  listePelotonsActifs() : Set(Platoon) = self.pelotons->select(p | p.voitures->size() > 1)
--Requete #2 
  listeVehiculesInscritsDansPelotons() : Bag(PlatoonVehicule) = self.pelotons.voitures->select(v | self.enregistres->includes(v))
--Requete #3
  listeConducteursInscritsDansPelotons() : Bag(Conducteur) = self.pelotons.voitures.conducteur->select( c | self.inscrits->includes(c))
--Requete #4 Un peloton est considéré comme défusionable s'il possede un leader potentiel, soit une voiture enregistrée qui possède un conducteur inscrit, autre que son leader actuel.
  listePelotonsDefusionables() : Set(Platoon) = self.pelotons->select(p | p.voitures->select(v|self.enregistres->includes(v) and self.inscrits->includes(v.conducteur))->size() > 1)		  
end

class GPS
end

class Conducteur
 attributes
   ID : Integer
   name : String
end

class Platoon
  operations
--Operation #5 Prend les voitures du peloton entré en parametre et les met à la fin du peloton sur lequel la fonction est appelée
   fusion( peloton1: Platoon)
        pre differentPelotons:self <> peloton1
        post peloton1retire:self.gestionnaire.pelotons = self.gestionnaire.pelotons@pre->excluding(peloton1)
        post voituresPeloton:self.voitures = self.voitures@pre->union(peloton1.voitures@pre)
        post positionMiseajour:peloton1.voitures->forAll(v|self.voitures->any(c|c.position=v.position + self.voitures@pre->size())=v)
        post leader2TraqueFinpeloton1: let last1:PlatoonVehicule = self.voitures@pre->any(v|v.position=self.voitures@pre->size()) in
            peloton1.voitures@pre->select(v|v.position@pre=1).vc.camera.cibleCamera->includes(last1) and
            peloton1.voitures@pre->select(v|v.position@pre=1).vc.radar.cibleRadar->includes(last1)
        post radioPeloton1Misajour: self.voitures->forAll(v| v.vc.radio.receveurs = self.voitures->excluding(v))

-- Operation #6 La voiture entrée en parametre et toutes les voitures derières elle sont mis dans un nouveau peloton
-- 				et sont retirées du peloton en cours
   defusion(newLeader:PlatoonVehicule) : Platoon
		pre leaderDanslePeloton: self.voitures->includes(newLeader)
        pre possedeConducteurs: newLeader.conducteur.isDefined()
        pre pasDejaLeader:  newLeader.position <> 1
        post positionAjour:result.voitures->forAll(v|self.voitures@pre->any(c|c.position@pre=v.position + self.voitures->size()) = v)
        post newLeaderNeTraquePlusCamera:newLeader.vc.camera.cibleCamera->isEmpty()
        post newLeaderNeTraquePlusRadar:newLeader.vc.radar.cibleRadar->isEmpty()
        post radioPeloton1Misajour: self.voitures->forAll(v| v.vc.radio.receveurs = self.voitures->excluding(v))
        post radioPeloton2Misajour: result.voitures->forAll(v| v.vc.radio.receveurs = result.voitures->excluding(v))

 --Operation # 7 Ajoute le vehicule entré en parametre à la fin du peloton
   joindreVoiture(newVehicule:PlatoonVehicule)
		pre newVehiculePasDansPeloton: self.voitures->excludes(newVehicule)
        post newVehiculeInclut: self.voitures = self.voitures@pre->including(newVehicule)
        post newVehiculeALaFin: newVehicule.position = self.voitures->size()
        post newVehiculeCamera: newVehicule.vc.camera.cibleCamera=self.voitures->any(position=newVehicule.position-1)
        post newVehiculeRadar: newVehicule.vc.radar.cibleRadar=self.voitures->any(position=newVehicule.position-1)
        post radioMisAJour: self.voitures->forAll(v| v.vc.radio.receveurs = self.voitures->excluding(v))
		
--Requete #5
   obtenirLeader() : PlatoonVehicule = self.voitures->any(position = 1)				
end

class PlatoonVehicule
  attributes
    ID : Integer
    position : Integer
  operations
 
 --Operation #8 Voiture quitte son peloton seulement si conducteur pour continuer la route si en mouvement. 
 -- 			Si leader le vehicule derière doit avoir un conducteur pour pour qu'il puisse devenir le nouveau leader.
    quitterPlatoon()
	 pre possedeConducteur: self.conducteur.isDefined()
     pre leaderQuitterSiConducteurPosition2: self.position=1 implies self.peloton.voitures->any(position=2).conducteur.isDefined()
     post plusDansPeloton: self.peloton.voitures = self.peloton.voitures@pre->excluding(self) and self.peloton <> self.peloton@pre
     post aucunTraquageCamera: self.vc.camera.cibleCamera->isEmpty()
     post aucunTraquageRadar: self.vc.camera.cibleCamera->isEmpty()
     post aucunRadio: self.vc.radio.receveurs->isEmpty()
     post positionPelotonMisaJour: self.peloton@pre.voitures@pre->sortedBy(position)->excluding(self) = self.peloton@pre.voitures->sortedBy(position) and
								   self.peloton@pre.voitures->forAll(v|self.peloton@pre.voitures->sortedBy(position)->at(v.position)=v)
     post cameraPelotonMisAJour: self.peloton@pre.voitures->any(position=self.position@pre).vc.camera.cibleCamera->includes(self.peloton@pre.voitures->any(position=self.position@pre-1))
     post radarPelotonMisAJour: self.peloton@pre.voitures->any(position=self.position@pre).vc.radar.cibleRadar->includes(self.peloton@pre.voitures->any(position=self.position@pre-1))
     post radioPelotonMisajour: self.peloton@pre.voitures->forAll(v| v.vc.radio.receveurs = self.peloton@pre.voitures->excluding(v))
	 
	 
-- Requete #6
	listeVehiculesDevant() : Set(PlatoonVehicule) = self.peloton.voitures->select(v | v.position < self.position)
--Requete #7
	listeVehiculesDerriere() : Set(PlatoonVehicule) = self.peloton.voitures->select(v | v.position > self.position)	 
end

aggregation PlatoonBuildup between
  Platoon[1] role peloton
  PlatoonVehicule[1..*] role voitures
end

association Gestion between
 System[1] role gestionnaire
 Platoon[*] role pelotons
end

association Enregistrement between
 System[0..1]
 PlatoonVehicule[*] role enregistres
end

association Inscription between
 System[0..1]
 Conducteur[*] role inscrits
end

association Conducteur between
  PlatoonVehicule[1] role voiture
  Conducteur[0..1] role conducteur
end

association sendRadioData between
  VehiculeController[1]
  Radio[1] role radio
end

association TransmissionRadio between
  Radio[0..*] role emetteur
  PlatoonVehicule[0..*] role receveurs
end

association ReceptionRadar between
 VehiculeController[1]
 Radar[1] role radar
end

association TraquageRadar between
 Radar[0..1]
 PlatoonVehicule[0..1] role cibleRadar
end

association ReceptionCamera between
 VehiculeController[1]
 Camera[1] role camera
end

association TraquageCamera between
 Camera[0..1]
 PlatoonVehicule[0..1] role cibleCamera
end

association ControllePar between
  PlatoonVehicule[1]
  VehiculeController[1] role vc
end

association ReceptionGPS between
  VehiculeController[1]
  GPS[1] role gps
end


constraints

--1. leader doit avoir un conducteur
context Platoon
    inv leaderConducteur : self.voitures->select(position = 1).conducteur->notEmpty()

--2. Toutes les voitures doivent communiquer avec les autres voitures de son peloton.
context Platoon
    inv comRadio : self.voitures->forAll(v| v.vc.radio.receveurs = self.voitures->excluding(v))

--3. Le leader d’un peloton doit être inscrits dans le système.
context System
    inv voituresEnr : self.enregistres->includesAll(self.pelotons.voitures->select(position=1))

--4. Le conducteurs du véhicule leader d’un peloton doit être inscrit dans le système.
context System
    inv conducteurLeaderInscrit : self.inscrits->includesAll(self.pelotons.voitures->select(position = 1).conducteur)

--5. Le radar de chaque véhicule de peloton observe le vehicule devant lui
context Platoon
    inv traquageRadar : self.voitures->select(position>1)->forAll(v|v.vc.radar.cibleRadar = self.voitures->any(position=v.position-1))

--6. Le camera de chaque véhicule de peloton observe le vehicule devant lui
context Platoon
    inv traquageCamera : self.voitures->select(position>1)->forAll(v|v.vc.camera.cibleCamera = self.voitures->any(position=v.position-1))

--7. Tous les véhicules d’un peloton forment une chaîne
context Platoon
    inv positionValide: self.voitures->forAll(v|self.voitures->sortedBy(position)->at(v.position)=v)

--8. Un leader ne traque aucun véhicule
context Platoon
    inv leaderNeTraquePas : self.voitures->any(position = 1).vc.camera.cibleCamera.isUndefined() and self.voitures->any(position = 1).vc.radar.cibleRadar.isUndefined()

--9. Chaque vehicule a un id différent
context System
    inv voitureIdDiff : self.enregistres->forAll( v | self.enregistres->excluding(v).ID->excludes(v.ID))
	
--10 Chaque conducteur a un id différent
context System
    inv conducteurIdDiff : self.inscrits->forAll( c | self.inscrits->excluding(c).ID->excludes(c.ID))
